


* Design Decisions:
  Not going to use moveit.
  Moveit is designed to be used with robot arms and is mostly concerned with
  path planning of end effectors and not mobile robots. So, it would probably
  not work for my purposes.


* Plan:
  First, set up octomap.
  Then using a blank octomap with fake obstacles,
  Use OMPL to do RRT path planning as a rosnode.
  Then integrate it with either move_base(ros1)
  or navigation(ros2).
  Then create a dynamic planner to integrate with
  move_base/navigation.
  organize the code you have written a bit better into different files.

* Dynamic planning
  1. Clean up existing global planner code into a single class.
  2. Create main file that includes both global and local planners. Integrate them.
  3. Understand Jackal Gazebo Simulation.
  4. Global Planner will need to operate on Empty_World map somehow.
    a. Possibly use CERL's octomap implementation.
  4. Create Dynamic Window Planner
    a. This is going to have to work with sensors to update the map and stuff.
    b. Will need a mapping software like Octomap. Talk to Matt Richards.

  
  

  
* Octomap/RTabMap
  1. Visualize the rosbag file from cerl. (Nope. Will use the freiburg campus)
  2. Load it into gazebo somehow as a world file.
  3. Figure out a way to use it to create a global map.
  4. Run the jackal in this global map and perform local planning.
     Will need a control system to follow the waypoints.
  
  An RTabMap of the Freiburg campus is generated.
  I need to edit the auvsl_planner launch file to run the RTabMap, Jackal Gazebo sim,
  and the auvsl_planner node.
  
  Somehow convert an rtabmap into a gazebo world
  Create point cloud from rtabmap laser scans.
  Use meshlab to convert point cloud to mesh
  

  1. Request a complete octomap from RTabMap from the auvsl_planner node
  2. Do global planning on the octomap with a low level of fidelity.
     Set octomap resolution to like a meter or something
  3. Do Local planning on the octomap with a much higher level of fidelity
     Or use RTabMap to request a 2d occupancy grid.
  4. 





* DONE D* algorithm
  Basic implementation finished.
  Can determine a path in the presence of dynamic obstacles.
  World map is very simple at this point
  Cost map is also very simple.
  No heuristics yet.

** TODO Simple Heuristic
   To guide search. Use euclidean distance for now.
   This might not be admissible/consistent with respect to the
   cost function. Because the cost function is going to become
   pretty complex. So it might not make sense to implement a heuristic
   Also it may not be necessary. Algorithm is already pretty fast.
   This is low priority.

** TODO Complex Cost function
   Cost function that estimates traversability
   1. Online simulation of vehicle to determine which neighboring states are reachable
      and estimate how safe each state is and total time of traverse
      This is probably not feasible for realtime operation (~10Hz).
   2. Offline precomputation of which neighboring states are reachable, how safe the states are
      and how long it would take to reach the state.
      1. Possibly use a neural network to model possibility of roll-over at a state
      2. Offline precomputation will be include traversing from lower to higher terrain,
         higher to lower terrain, and staying on flat terrain. Then running simulations to
         determine the minimum safe velocities. idk.





** TODO Complex world map plus jackal nodes
   Simulate whole Jackal in gazebo
   rely on ros nodes for localization
   Use perception for obstacle detection and updating map in D*
   Integrate planners with a control system
   the online loop in D* will have to actually control
   the vehicle and physically follow the D* backpointers


* DONE RRT
  In general, this is done.

** TODO Smoother trajectories
   Include a low pass filter on velocity commands
   so that velocity command smoothly transitions to from old to new command

** TODO SST
   Sparse Stable RRT
   asymptotically optimal
   also apparently sparse so hopefully it doesn't expand a bunch of nodes that are all close together



  

* OMPL
  WTF why is it so hard. I guess I need to read the tutorial shit.

  Done: 1. Create ODE based state propagator class. using jackal dynamic model.
  Dont: 2. Don't implement your own state sampler class. Use SteeredControlSampler.
                 I'm not sure steeredcontrolsampler is what I need. I think I should use SimpleDirectControlSampler
  Done: 2. Use SimpleDirectedControlSampler. This requires a controlsampler to be passed to si_.
  Done: 3. Implement a controlsampler. Iterate over possible control values.
           (Currently using default random control sampler which is stupid)
  Done: 4. Do implement JackalStatePropagator. give JackalStatePropagator to SpaceInformation.


  !!!use control/* not geometric/*!!!

  Use realvectorstatespace as usual

  Find out about distance function. Its L2 norm implemented in RealVectorStateSpace.
  Distance function gets used in the nearest neighbor calculations.
  It might be good to actually just leave it how it is. Probably not.
  

* DONE Intelligent state sampling
  Make the state space sampler more likely
  to sample in a region around the node that
  is closest to the goal. Prevent unnecessary
  exploration of the state space.

* DONE Prevent Excessive Skidding
  This isn't Tokyo drift. Computing Vl and Vr from Vf and W using kinematic approx might be dumb.
  Perhaps a better idea is just to do Vl = Vf - W and Vr = Vf - W
  So that way the total difference between tire velocities is limited to prevent skidding.
  This is actually not really different from the current approach. Shit.
  I fixed this problem be adding PID control for the tires. When you consider
  the torque on the tires, everything works better for some reason.
  Also added a simple heuristic for tire reaction torque based on slip. Its a hack. I don't care.

* DONE Smarter Control Sampling
  Sample omega's such that (~omega*duration) + heading = heading towards target
  Sample forward velocities such that (~Vf*duration) + position = target_position

  Where ~omega is required omega + small random sampling
        ~Vf is required Vf + small random sampling

  Working on it.

* DONE Smart Distance Function
  Only Penalize velocity if it is not in the direction towards
  the goal state. So do a dot product. Before I implement this,
  I'm going to have to convert from RBDL velocity to world frame
  velocity. RBDL floating based velocity representation is painfully
  bad. Fortunately I figured it out long ago through trial and error
  and suffering. Note RBDL linear velocity actually matches real linear
  velocity. Oh.

* LPF the vehicle controls to produce smoother trajectories
  I belive the jackal state propagator can take into account the previous control
  and I can provide a short interpolation between previous and current controls
  to ensure smoother motion.
  update. I don't have access to the previous control.

* <2021-03-18 Thu> Update
  Kinematic model planner is working. Dynamic model planner is not working. Visualizer is working.
  It is cool.
  

* More information required:
  Ask Norris about whether to use ros 1 or 2.



* Minimum Viable Product:
** DONE RRT Algorithm
   Do it with ompl

** Double D*
   Can't be done with ompl. Must implement from scratch.

** Occupancy grid generation
   octomap. Generate a basic grid with a few simple obstacles
   just for testing the planning algorithms.

** Octomap ROS server
   Figure out how to use the octomap server node


** Implement custom OcTree inheriting from OcTreeDataNode class
   So, the current default OcTreeNode only holds a single float that
   represents occupancy. Thats not enough. We need an OcTree with Nodes
   that contain the wealth of information available. Will need to implement
   classes that inherit from the more abstract templated OcTree class.
   Not a huge deal.


** Implement custom motion validator class that uses octomap raycasting



* Nice To Have:
** Multithreading
   Use multiple threads to explore vehicle states faster

** URDF for specifying dynamic model
   Load URDF into rbdl instead of manually specifying
   vehicle description.
   So you can swap it out for other vehicle models.
** DONE Configuration file for all parameters. YAML format maybe. I think ROS has a way to do this.
   Numerous parameters that could be adjusted between runs.
   Fuzzy constant speed.
   Max angular vel
   Planner goal bias
   Planner resolution
   Dynamic model ode time step

